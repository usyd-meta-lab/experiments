name: Create experiment from issue

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write

jobs:
  create:
    # Only run if the issue has the "new-experiment" label
    if: contains(join(github.event.issue.labels.*.name, ','), 'new-experiment')
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python deps
        run: |
          python3 -V
          python3 -m pip install --quiet pyyaml

      - name: Parse Issue Form → JSON payload
        id: parse
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          python3 - <<'PY'
          import os, re, json, yaml, sys

          body = os.environ.get("ISSUE_BODY", "")

          # Extract content under "### <Label>" until next "### " or end
          def get_block(label:str) -> str:
              m = re.search(rf"^### {re.escape(label)}\s*\n\n([\s\S]*?)(?=\n^### |\Z)", body, re.M)
              if not m:
                  return ""
              val = m.group(1).strip()
              # Strip fenced code blocks if present
              if val.startswith("```") and val.endswith("```"):
                  val = "\n".join(val.splitlines()[1:-1]).strip()
              return val

          data = {
              "id":          get_block("Experiment ID"),
              "title":       get_block("Title"),
              "description": get_block("Description"),
              "status":      get_block("Status") or "draft",
              "short_title": get_block("Short title"),
          }

          # Comma-separated → arrays
          authors = [a.strip() for a in get_block("Authors (comma-separated)").split(",") if a.strip()]
          tags    = [t.strip() for t in get_block("Tags (comma-separated)").split(",") if t.strip()]
          if authors: data["authors"] = authors
          if tags:    data["tags"] = tags

          # Optional single-line extras
          ethics_id = get_block("Ethics ID")
          if ethics_id:
              data.setdefault("ethics", {})["id"] = ethics_id

          datapipes = [d.strip() for d in get_block("DataPipe IDs (comma-separated)").split(",") if d.strip()]
          if datapipes:
              data.setdefault("data", {})["datapipes"] = datapipes

          # YAML blocks
          for key, label in [
              ("links",    "Links (YAML)"),
              ("sample",   "Sample (YAML, optional)"),
              ("measures", "Measures (YAML list, optional)"),
          ]:
              raw = get_block(label)
              if raw:
                  try:
                      val = yaml.safe_load(raw)
                      if val is not None:
                          data[key] = val
                  except Exception:
                      pass

          # Freeform extra YAML (merged last)
          extra = get_block("Extra YAML (optional)")
          if extra:
              try:
                  more = yaml.safe_load(extra)
                  if isinstance(more, dict):
                      data.update(more)
              except Exception:
                  pass

          if not data.get("id"):
              print("::error::Missing 'Experiment ID' in Issue Form.")
              sys.exit(1)

          payload = json.dumps(data, separators=(',', ':'), ensure_ascii=False)

          # Emit output safely (multiline/characters) via $GITHUB_OUTPUT
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write("payload<<EOF\n")
              fh.write(payload)
              fh.write("\nEOF\n")
          PY

      - name: Create/merge metadata.yml in experiments/<id>/
        env:
          PAYLOAD: ${{ steps.parse.outputs.payload }}
        run: |
          python3 - <<'PY'
          import os, json, yaml, datetime, pathlib

          data = json.loads(os.environ["PAYLOAD"])
          eid  = data["id"]

          base_dir = pathlib.Path("experiments") / eid
          meta_path = base_dir / "metadata.yml"
          base_dir.mkdir(parents=True, exist_ok=True)

          if meta_path.exists():
            with open(meta_path, "r", encoding="utf-8") as f:
              meta = yaml.safe_load(f) or {}
          else:
            meta = {
              "id": eid,
              "version": "1.0.0",
              "date_created": datetime.date.today().isoformat(),
            }

          meta.update(data)
          meta["date_updated"] = datetime.date.today().isoformat()

          with open(meta_path, "w", encoding="utf-8") as f:
            yaml.safe_dump(meta, f, sort_keys=False, allow_unicode=True)
          PY

      - name: Commit files
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git add experiments/**/metadata.yml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else:
            git commit -m "Create/update experiment metadata from issue"
            git push
          fi

      - name: Comment back on issue
        uses: actions/github-script@v7
        with:
          script: |
            const payload = JSON.parse(core.getInput('payload'));
            const id = payload.id;
            const path = `experiments/${id}/metadata.yml`;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `✅ Created/updated \`${path}\`.\n\nEdit that file as needed; the catalog will rebuild automatically on push.`
            });
          payload: ${{ steps.parse.outputs.payload }}