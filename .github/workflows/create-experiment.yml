name: Create experiment from issue

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write

jobs:
  create:
    # Only run if the issue has the "new-experiment" label
    if: contains(join(github.event.issue.labels.*.name, ','), 'new-experiment')
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python + deps
        run: |
          python3 -V
          python3 - <<'PY'
          import sys; sys.exit(0)
          PY
          python3 -m pip install --quiet pyyaml

      - name: Parse Issue Form → JSON payload
        id: parse
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          python3 - <<'PY'
          import os, re, json, yaml

          body = os.environ["ISSUE_BODY"] or ""

          # Helper to extract the content under "### Label"
          def get_block(label):
            # Match "### Label" then capture until next "### " or end
            m = re.search(rf"^### {re.escape(label)}\s*\n\n([\s\S]*?)(?=\n^### |\Z)", body, re.M)
            if not m:
              return ""
            val = m.group(1).strip()
            # Strip surrounding code fences if present
            if val.startswith("```") and val.endswith("```"):
              val = "\n".join(val.splitlines()[1:-1]).strip()
            return val

          # Pull fields by their **visible labels** in your Issue Form
          data = {
            "id":           get_block("Experiment ID"),
            "title":        get_block("Title"),
            "description":  get_block("Description"),
            "status":       get_block("Status") or "draft",
            "short_title":  get_block("Short title"),
          }

          # Authors/tags as comma-separated → arrays
          authors = [a.strip() for a in get_block("Authors (comma-separated)").split(",") if a.strip()]
          tags    = [t.strip() for t in get_block("Tags (comma-separated)").split(",") if t.strip()]
          if authors: data["authors"] = authors
          if tags:    data["tags"] = tags

          # Optional single-line extras
          ethics_id = get_block("Ethics ID")
          datapipes = [d.strip() for d in get_block("DataPipe IDs (comma-separated)").split(",") if d.strip()]
          if ethics_id:
            data.setdefault("ethics", {})["id"] = ethics_id
          if datapipes:
            data.setdefault("data", {})["datapipes"] = datapipes

          # YAML blocks (safe to leave blank)
          def merge_yaml_block(key, label):
            raw = get_block(label)
            if raw:
              try:
                obj = yaml.safe_load(raw)
                if obj is not None:
                  data[key] = obj
              except Exception:
                # If user pasted non-YAML, ignore quietly; schema will catch later
                pass

          merge_yaml_block("links",   "Links (YAML)")
          merge_yaml_block("sample",  "Sample (YAML, optional)")
          merge_yaml_block("measures","Measures (YAML list, optional)")

          # Freeform extra YAML (merged last)
          extra = get_block("Extra YAML (optional)")
          if extra:
            try:
              more = yaml.safe_load(extra)
              if isinstance(more, dict):
                data.update(more)
            except Exception:
              pass

          # Minimal validation
          if not data.get("id"):
            print("::error::Missing 'Experiment ID' field in the issue form.")
            raise SystemExit(1)
          if not data.get("title"):
            print("::warning::No Title provided; will fall back to ID in UI.")

          # Compact JSON string (safe to pass as an output)
          payload = json.dumps(data, separators=(",", ":"), ensure_ascii=False)

          # Set *multi-line* output to avoid quoting issues
          print("payload<<EOF")
          print(payload)
          print("EOF")
          PY >> "$GITHUB_OUTPUT"

      - name: Create/merge metadata.yml in experiments/<id>/
        env:
          PAYLOAD: ${{ steps.parse.outputs.payload }}
        run: |
          python3 - <<'PY'
          import os, json, yaml, datetime, pathlib

          data = json.loads(os.environ["PAYLOAD"])
          eid  = data["id"]

          base_dir = pathlib.Path("experiments") / eid
          meta_path = base_dir / "metadata.yml"

          base_dir.mkdir(parents=True, exist_ok=True)

          # Start with existing metadata if present; else with sensible defaults
          if meta_path.exists():
            with open(meta_path, "r", encoding="utf-8") as f:
              meta = yaml.safe_load(f) or {}
          else:
            meta = {
              "id": eid,
              "version": "1.0.0",
              "date_created": datetime.date.today().isoformat(),
            }

          meta.update(data)
          meta["date_updated"] = datetime.date.today().isoformat()

          with open(meta_path, "w", encoding="utf-8") as f:
            yaml.safe_dump(meta, f, sort_keys=False, allow_unicode=True)
          PY

      - name: Commit files
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git add experiments/**/metadata.yml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Create/update experiment metadata from issue"
            git push
          fi

      - name: Comment back on issue
        uses: actions/github-script@v7
        with:
          script: |
            const payload = JSON.parse(core.getInput('payload'));
            const id = payload.id;
            const path = `experiments/${id}/metadata.yml`;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `✅ Created/updated \`${path}\`.\n\nYou can edit that file and push changes; the catalog will rebuild automatically.`
            });
          payload: ${{ steps.parse.outputs.payload }}